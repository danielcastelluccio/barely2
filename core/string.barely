type String : struct {
    pointer: *[]byte,
    length: uint,
}

proc string_new(pointer: *[]byte): String {
    return string_new_length(pointer, raw_string_length(pointer));
}

proc string_new_length(pointer: *[]byte, length: uint): String {
    var result: String;
    result.pointer = pointer;
    result.length = length;
    return result;
}

proc string_new_empty(): String {
    var result: String = @init(String);
    return @init(String);
}

proc string_from_range(string: String, start: uint, end: uint): String {
    var pointer: ptr = @cast(ptr, string.pointer);
    pointer = pointer + start;
    return @build(String, @cast(*[]byte, pointer), end - start);
}

proc string_equal(s1: String, s2: String): bool {
    if s1.length != s2.length { return false; };

    var i: uint = 0;
    while i < s1.length {
        if s1.pointer[i] != s2.pointer[i] { return false; };
        i = i + 1;
    };

    return true;
}

proc string_equal_length(s1: String, s2: String, length: uint): bool {
    var i: uint = 0;
    while i < length {
        if s1.pointer[i] != s2.pointer[i] { return false; };
        i = i + 1;
    };

    return true;
}

proc raw_string_length(string: *[]byte): uint {
    var size: uint = 0;
    while string[size] != '\0' {
        size = size + 1;
    };
    return size;
}

proc string_hash(string: *String): uint {
    var result: uint = 5381;

    var i: uint = 0;
    while i < string.length {
        result = result * 33 + @cast(uint, @cast(uint8, string.pointer[i]));
        i = i + 1;
    };

    return result;
}
