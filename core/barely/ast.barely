type Barely_Ast_Location : struct {
    file: String,
    row: uint,
    col: uint,
}

type Barely_Ast_Name_Type : struct {
    name: String,
    type_: Barely_Ast_Type
}

type Barely_Ast_File : struct {
    items: Dynamic_Array, // Barely_Ast_Item
}

type Barely_Ast_Item : struct {
    kind: enum {
        Procedure,
        Type
    },
    data: union {
        procedure: Barely_Ast_Item_Procedure,
        type_: Barely_Ast_Item_Type
    },
}

type Barely_Ast_Item_Type : struct {
    name: String,
    type_: Barely_Ast_Type
}

type Barely_Ast_Item_Procedure : struct {
    name: String,
    arguments: Dynamic_Array, // Barely_Ast_Name_Type
    returns: Dynamic_Array,   // Barely_Ast_Type
    body: Barely_Ast_Expression,
    end_location: Barely_Ast_Location,
    //has_implicit_return: bool;
}

type Barely_Ast_Statement : struct {
    kind: enum {
        Expression,
        Declaration,
        Assign,
        Return
    },
    data: union {
        expression: Barely_Ast_Statement_Expression,
        declaration: Barely_Ast_Declaration,
        assign: Barely_Ast_Assign,
        return_: Barely_Ast_Return
    },
}

type Barely_Ast_Return : struct {
    expression: *Barely_Ast_Expression
}

type Barely_Ast_Declaration : struct {
    declarations: Dynamic_Array, // Barely_Ast_Name_Type
    expression: *Barely_Ast_Expression
}

type Barely_Ast_Statement_Expression : struct {
    expression: Barely_Ast_Expression,
    stack_check: bool
}

type Barely_Ast_Assign_Part : Barely_Ast_Retrieve_Assign

type Barely_Ast_Assign : struct {
    parts: Dynamic_Array, // Barely_Ast_Assign_Part
    expression: *Barely_Ast_Expression
}

type Barely_Ast_Expression : struct {
    kind: enum {
        Block,
        Retrieve,
        Invoke,
        Number,
        String,
        Syscall,
        Multiple,
        Reference,
        Boolean,
        If,
        Operator,
        Init,
        Build
    },
    data: union {
        block: Barely_Ast_Block,
        retrieve: Barely_Ast_Retrieve,
        invoke: Barely_Ast_Invoke,
        number: Barely_Ast_Number,
        string: Barely_Ast_String,
        syscall: Barely_Ast_Syscall,
        init: Barely_Ast_Init,
        build: Barely_Ast_Build,
        multiple: Barely_Ast_Multiple,
        reference: Barely_Ast_Reference,
        boolean: Barely_Ast_Boolean,
        if_: Barely_Ast_If,
        operator: Barely_Ast_Operator
    },
}

type Barely_Ast_Type : struct {
    kind: enum {
        Internal,
        Identifier,
        Struct,
        Union,
        Array,
        Pointer,
        Procedure,
        Number,
        Enum
    },
    data: union {
        internal: Barely_Ast_Type_Internal,
        identifier: String,
        struct_: Barely_Ast_Type_Struct,
        union_: Barely_Ast_Type_Union,
        enum_: Barely_Ast_Type_Enum,
        array: Barely_Ast_Type_Array,
        pointer: Barely_Ast_Type_Pointer,
        procedure: Barely_Ast_Type_Procedure,
        number: Barely_Ast_Type_Number
    }
}

type Barely_Ast_Type_Array : struct {
    size: *Barely_Ast_Type,
    inner: *Barely_Ast_Type
}

type Barely_Ast_Type_Number : struct {
    value: uint
}

type Barely_Ast_Type_Pointer : struct {
    inner: *Barely_Ast_Type
}

type Barely_Ast_Type_Procedure : struct {
    arguments: Dynamic_Array, // Barely_Ast_Type
    returns: Dynamic_Array // Barely_Ast_Type
}

type Barely_Ast_Type_Struct : struct {
    items: Dynamic_Array // Barely_Ast_Name_Type
}

type Barely_Ast_Type_Union : struct {
    items: Dynamic_Array // Barely_Ast_Name_Type
}

type Barely_Ast_Type_Enum : struct {
    items: Dynamic_Array
}

type Barely_Ast_Type_Internal : enum {
    Uint,
    Uint32,
    Byte,
    Bool
}

type Barely_Ast_Block : struct {
    statements: Dynamic_Array // Barely_Ast_Statement
}

type Barely_Ast_Retrieve_Assign : struct {
    kind: enum {
        Identifier,
        Parent,
        Array
    },
    data: union {
        identifier: Barely_Ast_Retrieve_Assign_Identifier,
        parent: Barely_Ast_Retrieve_Assign_Parent,
        array: Barely_Ast_Retrieve_Assign_Array
    },
}

type Barely_Ast_Retrieve_Assign_Array : struct {
    array: *Barely_Ast_Expression,
    item: *Barely_Ast_Expression,
    array_type: Barely_Ast_Type,
}

type Barely_Ast_Retrieve_Assign_Parent : struct {
    parent: *Barely_Ast_Expression,
    item: String,
    parent_type: Barely_Ast_Type,
}

type Barely_Ast_Retrieve_Assign_Identifier : struct {
    identifier: String,
    type_: Barely_Ast_Type
}

type Barely_Ast_Retrieve : Barely_Ast_Retrieve_Assign

type Barely_Ast_Invoke : struct {
    procedure: *Barely_Ast_Expression,
    arguments: Dynamic_Array, // Barely_Ast_Expression
    procedure_type: Barely_Ast_Type
}

type Barely_Ast_If : struct {
    condition: *Barely_Ast_Expression,
    true_code: *Barely_Ast_Expression,
    false_code: *Barely_Ast_Expression
}

type Barely_Ast_Operator : struct {
    arguments: Dynamic_Array, // Barely_Ast_Expression
    kind: enum {
        Add,
        Subtract,
        Multiply,
        Divide,
        Equals,
        Greater,
        Less,
        Greater_Equals,
        Less_Equals,
    },
    operand_type: Barely_Ast_Type
}

type Barely_Ast_Boolean : struct {
    value: bool
}

type Barely_Ast_Number : struct {
    kind: enum {
        Integer,
        Float,
    },
    data: union {
        integer: uint,
    },
    wanted_type: Barely_Ast_Type
}

type Barely_Ast_String : struct {
    value: String
}

type Barely_Ast_Syscall : struct {
    arg_count: uint,
    arguments: Dynamic_Array // Barely_Ast_Expression
}

type Barely_Ast_Init : struct {
    type_: Barely_Ast_Type
}

type Barely_Ast_Build : struct {
    type_: Barely_Ast_Type,
    arguments: Dynamic_Array // Barely_Ast_Expression
}

type Barely_Ast_Multiple : struct {
    expressions: Dynamic_Array // Barely_Ast_Expression
}

type Barely_Ast_Reference : struct {
    inner: *Barely_Ast_Expression,
}
