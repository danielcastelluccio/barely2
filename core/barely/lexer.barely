type Barely_Token_Kind : enum {
    Invalid,
    Left_Parenthesis,
    Right_Parenthesis,
    Left_Curly_Brace,
    Right_Curly_Brace,
    Left_Brace,
    Right_Brace,
    Semicolon,
    Colon,
    Period,
    Double_Period,
    Comma,
    Equals,
    Double_Equals,
    Plus,
    Minus,
    Asterisk,
    Slash,
    Percent,
    Ampersand,
    Double_Ampersand,
    Double_Bar,
    Exclamation,
    Exclamation_Equal,
    Less,
    Less_Equals,
    Greater,
    Greater_Equals,

    Identifier,
    Keyword,
    Number,
    String,
    Character,
}

type Barely_Token : struct {
    kind: Barely_Token_Kind,
    data: String,
    location: Barely_Location,
}

type Barely_Location : struct {
    file: String,
    row: uint,
    column: uint,
}

proc barely_write_token(writer: Writer, pointer: ptr) {
    var token: Barely_Token = @cast(*Barely_Token, pointer).*;

    if token.kind == Left_Parenthesis {
        write!(writer, "(");
    } else if token.kind == Right_Parenthesis {
        write!(writer, ")");
    } else if token.kind == Left_Curly_Brace {
        write!(writer, "{");
    } else if token.kind == Right_Curly_Brace {
        write!(writer, "}");
    } else if token.kind == Left_Brace {
        write!(writer, "[");
    } else if token.kind == Right_Brace {
        write!(writer, "]");
    } else if token.kind == Colon {
        write!(writer, ":");
    } else if token.kind == Ampersand {
        write!(writer, "&");
    } else if token.kind == Semicolon {
        write!(writer, ";");
    } else if token.kind == Identifier {
        write!(writer, "{}", token.data);
    } else if token.kind == Keyword {
        write!(writer, "{}", token.data);
    } else if token.kind == Number {
        write!(writer, "{}", token.data);
    } else {
        write!(writer, "Unknown");
    };
}

proc barely_lex(file: String, contents: String, allocator: Allocator): Dynamic_Array {
    append_custom_write(@build(Custom_Write, "token", barely_write_token));

    var tokens: Dynamic_Array = dynamic_array_new!(contents.length / 3, allocator, null, $type Barely_Token);
    var in_string: bool = false;
    var in_character: bool = false;
    var in_comment: bool = false;
    var buffer_start: uint = 0;

    var row: uint = 1;
    var column: uint = 1;

    var i: uint = 0;
    while i < contents.length {
        var character: byte = contents.pointer[i];
        var next_character: byte = '\0';
        if i + 1 < contents.length {
            next_character = contents.pointer[i + 1];
        };

        if in_comment {
            i = i + 1;

            if character == '\n' {
                row = row + 1;
                column = 1;

                in_comment = false;

                buffer_start = i;
            };
        } else if in_string || in_character {
            var a: uint;
            if character == '"' || character == '\'' {
                var substring: String = string_from_range(contents, buffer_start, i);

                var kind: Barely_Token_Kind = Invalid;
                if in_string {
                    kind = String;
                } else if in_character {
                    kind = Character;
                };

                var location: Barely_Location = @build(Barely_Location, file, row, column);
                dynamic_array_append!(&tokens, @build(Barely_Token, kind, substring, location), $type Barely_Token);
                in_string = false;
                in_character = false;

                column = column + (i - buffer_start) + 2;

                i = i + 1;
                buffer_start = i;
            } else {
                i = i + 1;
            };
        } else {
            if      character == '|' && next_character == '|' barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Double_Bar, 2)
            else if character == '=' && next_character == '=' barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Double_Equals, 2)
            else if character == '!' && next_character == '=' barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Exclamation_Equal, 2)
            else if character == '<' && next_character == '=' barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Less_Equals, 2)
            else if character == '>' && next_character == '=' barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Greater_Equals, 2)
            else if character == '&' && next_character == '&' barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Double_Ampersand, 2)
            else if character == '.' && next_character == '.' barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Double_Period, 2)
            else if character == '('  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Left_Parenthesis, 1)
            else if character == ')'  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Right_Parenthesis, 1)
            else if character == '{'  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Left_Curly_Brace, 1)
            else if character == '}'  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Right_Curly_Brace, 1)
            else if character == '['  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Left_Brace, 1)
            else if character == ']'  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Right_Brace, 1)
            else if character == ';'  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Semicolon, 1)
            else if character == ':'  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Colon, 1)
            else if character == '.'  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Period, 1)
            else if character == ','  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Comma, 1)
            else if character == '+'  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Plus, 1)
            else if character == '-'  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Minus, 1)
            else if character == '*'  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Asterisk, 1)
            else if character == '%'  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Percent, 1)
            else if character == '!'  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Exclamation, 1)
            else if character == '='  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Equals, 2)
            else if character == '>'  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Greater, 2)
            else if character == '<'  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Less, 2)
            else if character == '&'  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Ampersand, 1)
            else if character == ' '  barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Invalid, 1)
            else if character == '\n' {
                barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Invalid, 1);
                column = 1;
                row = row + 1;
            } else if character == '/' {
                if next_character == '/' {
                    barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Invalid, 2);
                    in_comment = true;
                } else {
                    barely_handle_lex_token(contents, &tokens, &buffer_start, &i, file, &row, &column, Slash, 1);
                };
            } else if character == '"' {
                in_string = true;
                barely_lex_buffer(contents, &tokens, &buffer_start, &i, file, &row, &column);
                i = i + 1;
                buffer_start = i;
            } else if character == '\'' {
                in_character = true;
                barely_lex_buffer(contents, &tokens, &buffer_start, &i, file, &row, &column);
                i = i + 1;
                buffer_start = i;
            } else {
                i = i + 1;
            };
        };
    };

    return tokens;
}

proc barely_handle_lex_token(contents: String, tokens: *Dynamic_Array, buffer_start: *uint, index: *uint, file: String, row: *uint, column: *uint, token_kind: Barely_Token_Kind, token_length: uint) {
    barely_lex_buffer(contents, tokens, buffer_start, index, file, row, column);
    if token_kind != Invalid {
        var location: Barely_Location = @build(Barely_Location, file, row.*, column.*);
        dynamic_array_append!(tokens, @build(Barely_Token, token_kind, string_new_empty(), location), $type Barely_Token);
    };
    index.* = index.* + token_length;
    column.* = column.* + token_length;
    buffer_start.* = index.*;
}

proc barely_is_keyword(string: String): bool {
    if string_equal(string, string_new("proc")) {
        return true;
    } else if string_equal(string, string_new("type")) {
        return true;
    } else if string_equal(string, string_new("var")) {
        return true;
    } else if string_equal(string, string_new("if")) {
        return true;
    } else if string_equal(string, string_new("else")) {
        return true;
    } else if string_equal(string, string_new("while")) {
        return true;
    } else if string_equal(string, string_new("struct")) {
        return true;
    } else if string_equal(string, string_new("union")) {
        return true;
    } else if string_equal(string, string_new("enum")) {
        return true;
    } else if string_equal(string, string_new("return")) {
        return true;
    };

    return false;
}

proc barely_lex_buffer(contents: String, tokens: *Dynamic_Array, buffer_start: *uint, index: *uint, file: String, row: *uint, column: *uint) {
    if (buffer_start.* - index.*) > 0 {
        var token_kind: Barely_Token_Kind = Identifier;
        var substring: String = string_from_range(contents, buffer_start.*, index.*);
        if substring.pointer[0] >= '0' && substring.pointer[0] <= '9' {
            token_kind = Number;
        } else if barely_is_keyword(substring) {
            token_kind = Keyword;
        };

        var location: Barely_Location = @build(Barely_Location, file, row.*, column.*);
        dynamic_array_append!(tokens, @build(Barely_Token, token_kind, substring, location), $type Barely_Token);

        column.* = column.* + (index.* - buffer_start.*);
    };
}

proc barely_create_basic_token(kind: Barely_Token_Kind): Barely_Token {
    return @build(Barely_Token, kind, @init(String), @init(Barely_Location));
}
