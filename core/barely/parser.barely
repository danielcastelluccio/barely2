type Parser : struct {
    tokens: *Dynamic_Array,
    tokens_index: uint,
    allocator: Allocator,
    //directives: Array_Barely_Ast_Directive,
}

proc barely_parser_create(tokens: *Dynamic_Array, allocator: Allocator): Parser {
    return @build(Parser, tokens, 0, allocator);
}

proc barely_peek_token_kind(parser: *Parser): Barely_Token_Kind {
    return dynamic_array_get!(parser.tokens, parser.tokens_index, $type Barely_Token).kind;
}

proc barely_peek_token(parser: *Parser): Barely_Token {
    return dynamic_array_get!(parser.tokens, parser.tokens_index, $type Barely_Token);
}

proc barely_peek_check_token(parser: *Parser, wanted: Barely_Token_Kind) {
    var token: Barely_Token = barely_peek_token(parser);
    if token.kind != wanted {
        print!("{}:{}:{}: Unexpected token\n", token.location.file, token.location.row, token.location.column);
        panic();
    };
}

proc barely_consume_check_token(parser: *Parser, wanted: Barely_Token_Kind) {
    var token: Barely_Token = barely_peek_token(parser);
    if token.kind != wanted {
        print!("{}:{}:{}: Unexpected token '{token}', expected '{token}'\n", token.location.file, token.location.row, token.location.column, token, barely_create_basic_token(wanted));
        panic();
    };
    parser.tokens_index = parser.tokens_index + 1;
}

proc barely_consume_token_data(parser: *Parser): String {
    var result: String = dynamic_array_get!(parser.tokens, parser.tokens_index, $type Barely_Token).data;
    parser.tokens_index = parser.tokens_index + 1;
    return result;
}

proc barely_consume_token_kind(parser: *Parser): Barely_Token_Kind {
    var result: Barely_Token_Kind = dynamic_array_get!(parser.tokens, parser.tokens_index, $type Barely_Token).kind;
    parser.tokens_index = parser.tokens_index + 1;
    return result;
}

proc barely_peek_token_data(parser: *Parser): String {
    return dynamic_array_get!(parser.tokens, parser.tokens_index, $type Barely_Token).data;
}

proc barely_parse_file(parser: *Parser): Barely_Ast_File {
    var result: Barely_Ast_File;

    result.items = dynamic_array_new!(32, parser.allocator, null, $type Barely_Ast_Item);
    while parser.tokens_index < parser.tokens.count {
        var node: Barely_Ast_Item = barely_parse_item(parser);
        dynamic_array_append!(&result.items, node, $type Barely_Ast_Item);
    };

    return result;
}

proc barely_parse_item(parser: *Parser): Barely_Ast_Item {
    var result: Barely_Ast_Item;

    if barely_peek_token_kind(parser) == Keyword {
        var keyword: String = barely_peek_token_data(parser);

        if string_equal(keyword, string_new("proc")) {
            var procedure: Barely_Ast_Item_Procedure  = barely_parse_procedure_item(parser);
            result.kind = Procedure;
            result.data.procedure = procedure;
        } else if string_equal(keyword, string_new("type")) {
            var type_: Barely_Ast_Item_Type  = barely_parse_type_item(parser);
            result.kind = Type;
            result.data.type_ = type_;
        } else {
            unreachable(@file, @line);
        };
    } else {
        unreachable(@file, @line);
    };

    return result;
}

proc barely_parse_type_item(parser: *Parser): Barely_Ast_Item_Type {
    var result: Barely_Ast_Item_Type;

    barely_consume_check_token(parser, Keyword);

    barely_peek_check_token(parser, Identifier);
    result.name = barely_consume_token_data(parser);

    barely_consume_check_token(parser, Colon);

    result.type_ = barely_parse_type(parser);

    return result;
}

proc barely_parse_procedure_item(parser: *Parser): Barely_Ast_Item_Procedure {
    var result: Barely_Ast_Item_Procedure;

    barely_consume_check_token(parser, Keyword);

    barely_peek_check_token(parser, Identifier);
    result.name = barely_consume_token_data(parser);

    barely_consume_check_token(parser, Left_Parenthesis);

    result.arguments = dynamic_array_new!(1, parser.allocator, null, $type Barely_Ast_Name_Type);
    while barely_peek_token_kind(parser) != Right_Parenthesis {
        if barely_peek_token_kind(parser) == Comma {
            barely_consume_check_token(parser, Comma);
        } else {
            var argument: Barely_Ast_Name_Type;

            barely_peek_check_token(parser, Identifier);
            argument.name = barely_consume_token_data(parser);

            barely_consume_check_token(parser, Colon);

            argument.type_ = barely_parse_type(parser);

            dynamic_array_append!(&result.arguments, argument, $type Barely_Ast_Name_Type);
        };
    };
    barely_consume_check_token(parser, Right_Parenthesis);

    result.returns = dynamic_array_new!(1, parser.allocator, null, $type Barely_Ast_Type);
    if barely_peek_token_kind(parser) == Colon {
        barely_consume_check_token(parser, Colon);
        var continuing: bool = true;
        while continuing {
            dynamic_array_append!(&result.returns, barely_parse_type(parser), $type Barely_Ast_Type);
            continuing = barely_peek_token_kind(parser) == Comma;
            if continuing {
                barely_consume_check_token(parser, Comma);
            };
        };
    };

    result.body = barely_parse_expression(parser);

    return result;
}

proc barely_get_special_invoke_name(procedure: Barely_Ast_Expression): bool, String {
    if procedure.kind == Retrieve {
        if procedure.data.retrieve.kind == Identifier {
            var name: String = procedure.data.retrieve.data.identifier;
            if string_equal_length(name, string_new("@"), 1) {
                return true, name;
            };
        };
    };
    
    return false, @init(String);
}

proc barely_parse_invoke_like(parser: *Parser, procedure: Barely_Ast_Expression): Barely_Ast_Expression {
    var result: Barely_Ast_Expression;

    var is_special: bool, special_name: String = barely_get_special_invoke_name(procedure);
    if is_special {
        if string_equal_length(special_name, string_new("@syscall"), 8) {
            var syscall: Barely_Ast_Syscall;
            syscall.arg_count = @cast(uint, @cast(uint8, special_name.pointer[special_name.length - 1]) - 48);
            syscall.arguments = barely_parse_invoke_expression_arguments(parser);

            result.kind = Syscall;
            result.data.syscall = syscall;
        } else {
            unreachable(@file, @line);
        };
    } else {
        var invoke: Barely_Ast_Invoke;
        invoke.procedure = allocate_value!(parser.allocator, procedure, $type Barely_Ast_Expression);
        invoke.arguments = barely_parse_invoke_expression_arguments(parser);

        result.kind = Invoke;
        result.data.invoke = invoke;
    };

    return result;
}

proc barely_parse_retrieve_array(parser: *Parser, array: Barely_Ast_Expression): Barely_Ast_Retrieve {
    var result: Barely_Ast_Retrieve;

    var retrieve: Barely_Ast_Retrieve_Assign_Array = @init(Barely_Ast_Retrieve_Assign_Array);
    retrieve.array = allocate_value!(parser.allocator, array, $type Barely_Ast_Expression);

    barely_consume_check_token(parser, Left_Brace);

    retrieve.item = allocate_value!(parser.allocator, barely_parse_expression(parser), $type Barely_Ast_Expression);

    result.kind = Array;
    result.data.array = retrieve;

    barely_consume_check_token(parser, Right_Brace);

    return result;
}

proc barely_parse_retrieve_parent(parser: *Parser, parent: Barely_Ast_Expression): Barely_Ast_Retrieve {
    var result: Barely_Ast_Retrieve;

    barely_consume_check_token(parser, Period);

    barely_peek_check_token(parser, Identifier);
    var item: String = barely_consume_token_data(parser);

    result.kind = Parent;
    result.data.parent = @build(Barely_Ast_Retrieve_Assign_Parent,
        allocate_value!(parser.allocator, parent, $type Barely_Ast_Expression),
        item
        @init(Barely_Ast_Type));
    return result;
}

proc barely_parse_invoke_expression_arguments(parser: *Parser): Dynamic_Array {
    var result: Dynamic_Array = dynamic_array_new!(1, parser.allocator, null, $type Barely_Ast_Expression);

    barely_consume_check_token(parser, Left_Parenthesis);

    while barely_peek_token_kind(parser) != Right_Parenthesis {
        if barely_peek_token_kind(parser) == Comma {
            barely_consume_check_token(parser, Comma);
        } else {
            var expression: Barely_Ast_Expression = barely_parse_expression(parser);
            dynamic_array_append!(&result, expression, $type Barely_Ast_Expression);
        };
    };

    barely_consume_check_token(parser, Right_Parenthesis);

    return result;
}

proc barely_parse_expression_multiple(parser: *Parser): Barely_Ast_Expression {
    var result: Barely_Ast_Expression;

    var multiple: Barely_Ast_Multiple;
    multiple.expressions = dynamic_array_new!(1, parser.allocator, null, $type Barely_Ast_Expression);

    var continue: bool = true;
    while continue {
        var expression: Barely_Ast_Expression = barely_parse_expression(parser);
        dynamic_array_append!(&multiple.expressions, expression, $type Barely_Ast_Expression);

        if barely_peek_token_kind(parser) == Comma {
            barely_consume_check_token(parser, Comma);
            continue = true;
        } else {
            continue = false;
        };
    };

    result.kind = Multiple;
    result.data.multiple = multiple;
    return result;
}

proc barely_parse_expression(parser: *Parser): Barely_Ast_Expression {
    var result: Barely_Ast_Expression;

    var kind: Barely_Token_Kind = barely_peek_token_kind(parser);
    if kind == Left_Curly_Brace {
        var block: Barely_Ast_Block = barely_parse_block(parser);
        result.kind = Block;
        result.data.block = block;
    } else if kind == Number {
        var number: Barely_Ast_Number = barely_parse_number(parser);
        result.kind = Number;
        result.data.number = number;
    } else if kind == String {
        var string: Barely_Ast_String = barely_parse_string(parser);
        result.kind = String;
        result.data.string = string;
    } else if kind == Identifier {
        var value: String = barely_peek_token_data(parser);

        if string_equal(value, string_new("true")) || string_equal(value, string_new("false")) {
            var boolean: Barely_Ast_Boolean = barely_parse_boolean(parser);
            result.kind = Boolean;
            result.data.boolean = boolean;
        } else {
            var retrieve: Barely_Ast_Retrieve = barely_parse_retrieve_identifier(parser);
            result.kind = Retrieve;
            result.data.retrieve = retrieve;
        };
    } else if kind == Ampersand {
        var reference: Barely_Ast_Reference = barely_parse_reference(parser);
        result.kind = Reference;
        result.data.reference = reference;
    } else if kind == Keyword {
        var keyword: String = barely_peek_token_data(parser);

        if string_equal(keyword, string_new("if")) {
            var if_: Barely_Ast_If = barely_parse_if(parser);
            result.kind = If;
            result.data.if_ = if_;
        } else {
            unreachable(@file, @line);
        };
    } else {
        unreachable(@file, @line);
    };

    var continue: bool = true;
    while continue {
        continue = false;

        var token_kind: Barely_Token_Kind = barely_peek_token_kind(parser);

        if token_kind == Left_Parenthesis {
            result = barely_parse_invoke_like(parser, result);
            continue = true;
        };

        if token_kind == Period {
            var retrieve: Barely_Ast_Retrieve = barely_parse_retrieve_parent(parser, result);
            result.kind = Retrieve;
            result.data.retrieve = retrieve;
            continue = true;
        };

        if token_kind == Left_Brace {
            var retrieve: Barely_Ast_Retrieve = barely_parse_retrieve_array(parser, result);
            result.kind = Retrieve;
            result.data.retrieve = retrieve;
            continue = true;
        };

        if token_kind == Plus || token_kind == Minus || token_kind == Asterisk || token_kind == Slash {
            var operator: Barely_Ast_Operator = barely_parse_operator(parser, &result);
            result.kind = Operator;
            result.data.operator = operator;
            continue = true;
        };
    };

    return result;
}

proc barely_parse_if(parser: *Parser): Barely_Ast_If {
    barely_consume_check_token(parser, Keyword);
    var result: Barely_Ast_If = @init(Barely_Ast_If);

    result.condition = allocate_value!(parser.allocator, barely_parse_expression(parser), $type Barely_Ast_Expression);
    result.true_code = allocate_value!(parser.allocator, barely_parse_expression(parser), $type Barely_Ast_Expression);

    if barely_peek_token_kind(parser) == Keyword && string_equal(barely_peek_token_data(parser), string_new("else")) {
        barely_consume_check_token(parser, Keyword);
        result.false_code = allocate_value!(parser.allocator, barely_parse_expression(parser), $type Barely_Ast_Expression);
    };

    return result;
}

proc barely_parse_reference(parser: *Parser): Barely_Ast_Reference {
    barely_consume_check_token(parser, Ampersand);
    var result: Barely_Ast_Reference;
    result.inner = allocate_value!(parser.allocator, barely_parse_expression(parser), $type Barely_Ast_Expression);
    return result;
}

proc barely_parse_retrieve_identifier(parser: *Parser): Barely_Ast_Retrieve {
    var result: Barely_Ast_Retrieve;
    result.kind = Identifier;
    result.data.identifier = barely_consume_token_data(parser);
    return result;
}

proc barely_parse_operator(parser: *Parser, first: *Barely_Ast_Expression): Barely_Ast_Operator {
    var result: Barely_Ast_Operator = @init(Barely_Ast_Operator);
    result.arguments = dynamic_array_new!(2, parser.allocator, null, $type Barely_Ast_Expression);

    if first != null {
        dynamic_array_append!(&result.arguments, first.*, $type Barely_Ast_Expression);
    };

    var token_kind: Barely_Token_Kind = barely_consume_token_kind(parser);
    if token_kind == Plus {
        result.kind = Add;
    } else if token_kind == Minus {
        result.kind = Subtract;
    } else if token_kind == Asterisk {
        result.kind = Multiply;
    } else if token_kind == Slash {
        result.kind = Divide;
    } else {
        unreachable(@file, @line);
    };

    dynamic_array_append!(&result.arguments, barely_parse_expression(parser), $type Barely_Ast_Expression);

    return result;
}

proc barely_parse_block(parser: *Parser): Barely_Ast_Block {
    var result: Barely_Ast_Block;

    barely_consume_check_token(parser, Left_Curly_Brace);

    result.statements = dynamic_array_new!(1, parser.allocator, null, $type Barely_Ast_Statement);
    while barely_peek_token_kind(parser) != Right_Curly_Brace {
        var statement: Barely_Ast_Statement = barely_parse_statement(parser);
        dynamic_array_append!(&result.statements, statement, $type Barely_Ast_Statement);
    };

    barely_consume_check_token(parser, Right_Curly_Brace);

    return result;
}

proc barely_parse_boolean(parser: *Parser): Barely_Ast_Boolean {
    var result: Barely_Ast_Boolean;
    var data: String = barely_consume_token_data(parser);

    result.value = string_equal(data, string_new("true"));

    return result;
}

proc barely_parse_number(parser: *Parser): Barely_Ast_Number {
    var result: Barely_Ast_Number;
    var data: String = barely_consume_token_data(parser);

    result.kind = Integer;
    result.data.integer = string_to_uint(data);

    return result;
}

proc barely_parse_string(parser: *Parser): Barely_Ast_String {
    var result: Barely_Ast_String;
    result.value = barely_consume_token_data(parser);
    return result;
}

proc barely_parse_type(parser: *Parser): Barely_Ast_Type {
    var result: Barely_Ast_Type;

    var token_kind: Barely_Token_Kind = barely_peek_token_kind(parser);
    if token_kind == Identifier {
        var name: String = barely_consume_token_data(parser);

        if string_equal(name, string_new("uint")) {
            result.kind = Internal;
            result.data.internal = Uint;
        } else if string_equal(name, string_new("bool")) {
            result.kind = Internal;
            result.data.internal = Bool;
        } else {
            result.kind = Identifier;
            result.data.identifier = name;
        };
    } else if token_kind == Keyword {
        var keyword: String = barely_consume_token_data(parser);

        if string_equal(keyword, string_new("struct")) {
            var struct_: Barely_Ast_Type_Struct;

            barely_consume_check_token(parser, Left_Curly_Brace);

            struct_.items = dynamic_array_new!(4, parser.allocator, null, $type Barely_Ast_Name_Type);
            while barely_peek_token_kind(parser) != Right_Curly_Brace {
                barely_peek_check_token(parser, Identifier);
                var name: String = barely_consume_token_data(parser);
                barely_consume_check_token(parser, Colon);
                var type_: Barely_Ast_Type = barely_parse_type(parser);

                var name_type: Barely_Ast_Name_Type = @build(Barely_Ast_Name_Type, name, type_);
                dynamic_array_append!(&struct_.items, name_type, $type Barely_Ast_Name_Type);

                if barely_peek_token_kind(parser) == Comma {
                    barely_consume_check_token(parser, Comma);
                };
            };

            barely_consume_check_token(parser, Right_Curly_Brace);

            result.kind = Struct;
            result.data.struct_ = struct_;
        } else if string_equal(keyword, string_new("union")) {
            var union_: Barely_Ast_Type_Union;

            barely_consume_check_token(parser, Left_Curly_Brace);

            union_.items = dynamic_array_new!(4, parser.allocator, null, $type Barely_Ast_Name_Type);
            while barely_peek_token_kind(parser) != Right_Curly_Brace {
                barely_peek_check_token(parser, Identifier);
                var name: String = barely_consume_token_data(parser);
                barely_consume_check_token(parser, Colon);
                var type_: Barely_Ast_Type = barely_parse_type(parser);

                var name_type: Barely_Ast_Name_Type = @build(Barely_Ast_Name_Type, name, type_);
                dynamic_array_append!(&union_.items, name_type, $type Barely_Ast_Name_Type);

                if barely_peek_token_kind(parser) == Comma {
                    barely_consume_check_token(parser, Comma);
                };
            };

            barely_consume_check_token(parser, Right_Curly_Brace);

            result.kind = Union;
            result.data.union_ = union_;
        } else {
            unreachable(@file, @line);
        };
    } else if token_kind == Asterisk {
        barely_consume_check_token(parser, Asterisk);

        var pointer: Barely_Ast_Type_Pointer = @init(Barely_Ast_Type_Pointer);
        pointer.inner = allocate_value!(parser.allocator, barely_parse_type(parser), $type Barely_Ast_Type);

        result.kind = Pointer;
        result.data.pointer = pointer;
    } else if token_kind == Left_Brace {
        barely_consume_check_token(parser, Left_Brace);

        var array: Barely_Ast_Type_Array = @init(Barely_Ast_Type_Array);
        array.size = allocate_value!(parser.allocator, barely_parse_type(parser), $type Barely_Ast_Type);

        barely_consume_check_token(parser, Right_Brace);

        array.inner = allocate_value!(parser.allocator, barely_parse_type(parser), $type Barely_Ast_Type);

        result.kind = Array;
        result.data.array = array;
    } else if token_kind == Number {
        var value: String = barely_consume_token_data(parser);

        var number: Barely_Ast_Type_Number = @init(Barely_Ast_Type_Number);
        number.value = string_to_uint(value);

        result.kind = Number;
        result.data.number = number;
    } else {
        unreachable(@file, @line);
    };

    return result;
}

proc barely_parse_statement(parser: *Parser): Barely_Ast_Statement {
    var result: Barely_Ast_Statement;

    var token_kind: Barely_Token_Kind = barely_peek_token_kind(parser);
    if token_kind == Identifier {
        result = barely_parse_statement_expression_or_assign(parser);
    } else if token_kind == Keyword {
        var keyword: String = barely_peek_token_data(parser);
        if string_equal(keyword, string_new("var")) {
            var declaration: Barely_Ast_Declaration = barely_parse_declaration(parser);
            result.kind = Declaration;
            result.data.declaration = declaration;
        } else if string_equal(keyword, string_new("return")) {
            var return_: Barely_Ast_Return = barely_parse_return(parser);
            result.kind = Return;
            result.data.return_ = return_;
        } else {
            result = barely_parse_statement_expression_or_assign(parser);
        };
    } else {
        unreachable(@file, @line);
    };

    return result;
}

proc barely_parse_return(parser: *Parser): Barely_Ast_Return {
    var result: Barely_Ast_Return = @init(Barely_Ast_Return);

    barely_consume_check_token(parser, Keyword);

    if barely_peek_token_kind(parser) != Semicolon {
        result.expression = allocate_value!(parser.allocator, barely_parse_expression_multiple(parser), $type Barely_Ast_Expression);
    };

    barely_consume_check_token(parser, Semicolon);

    return result;
}

proc barely_parse_declaration(parser: *Parser): Barely_Ast_Declaration {
    var result: Barely_Ast_Declaration;

    barely_consume_check_token(parser, Keyword);

    result.declarations = dynamic_array_new!(1, parser.allocator, null, $type Barely_Ast_Name_Type);
    var continue: bool = true;
    while continue {
        barely_peek_check_token(parser, Identifier);
        var name: String = barely_consume_token_data(parser);
        barely_consume_check_token(parser, Colon);
        var type_: Barely_Ast_Type = barely_parse_type(parser);

        dynamic_array_append!(&result.declarations, @build(Barely_Ast_Name_Type, name, type_), $type Barely_Ast_Name_Type);

        if barely_peek_token_kind(parser) == Comma {
            barely_consume_check_token(parser, Comma);
            continue = true;
        } else {
            continue = false;
        };
    };

    if barely_peek_token_kind(parser) == Equals {
        barely_consume_check_token(parser, Equals);
        result.expression = allocate_value!(parser.allocator, barely_parse_expression_multiple(parser), $type Barely_Ast_Expression);
    } else if barely_peek_token_kind(parser) == Semicolon {
        result.expression = null;
    } else {
        unreachable(@file, @line);
    };

    barely_consume_check_token(parser, Semicolon);

    return result;
}

proc barely_parse_statement_expression_or_assign(parser: *Parser): Barely_Ast_Statement {
    var result: Barely_Ast_Statement;
    result.kind = Expression;
    result.data.expression.expression = barely_parse_expression_multiple(parser);

    if barely_peek_token_kind(parser) == Equals {
        barely_consume_check_token(parser, Equals);

        var assign: Barely_Ast_Assign;
        assign.parts = dynamic_array_new!(1, parser.allocator, null, $type Barely_Ast_Assign_Part);

        assert_(result.data.expression.expression.kind == Multiple, @file, @line);

        var multiple: *Barely_Ast_Multiple = &result.data.expression.expression.data.multiple;
        var i: uint = 0;
        while i < multiple.expressions.count {
            var expression: *Barely_Ast_Expression = dynamic_array_get_ref!(&multiple.expressions, i, $type Barely_Ast_Expression);

            // HACK: need to do weird pointer casting stuff
            var assign_part: Barely_Ast_Assign_Part = @cast(*Barely_Ast_Assign_Part, @cast(ptr, &expression.data.retrieve)).*;
            dynamic_array_append!(&assign.parts, assign_part, $type Barely_Ast_Assign_Part);
            i = i + 1;
        };

        assign.expression = allocate_value!(parser.allocator, barely_parse_expression_multiple(parser), $type Barely_Ast_Expression);

        result.kind = Assign;
        result.data.assign = assign;

        barely_consume_check_token(parser, Semicolon);
    } else {
        if barely_peek_token_kind(parser) == Semicolon {
            barely_consume_check_token(parser, Semicolon);
            result.data.expression.stack_check = true;
        } else {
            result.data.expression.stack_check = false;
        };
    };

    return result;
}
