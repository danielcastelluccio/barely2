const STDIN : 0
const STDOUT : 1

const RDONLY : 0
const WRONLY : 1
const CREAT : 64
const TRUNC : 512

type File : struct {
    descriptor: uint
}

proc file_open_for_writing(path: *[]byte): File {
    return @build(File, @syscall3(2, path, WRONLY + CREAT + TRUNC, 452));
}

proc file_open_for_reading(path: *[]byte): File {
    return @build(File, @syscall3(2, path, RDONLY, 452));
}

proc file_close(file: File) {
    var _: uint = @syscall1(3, file.descriptor);
}

proc file_writer_create(file: *File): Writer {
    return @build(Writer, @cast(ptr, file), file_write);
}

proc file_reader_create(file: *File): Reader {
    return @build(Reader, @cast(ptr, file), file_read);
}

proc file_write(data: ptr, string: *[]byte, length: uint) {
    var file: *File = @cast(*File, data);
    var _: uint = @syscall3(1, file.descriptor, string, length);
}

proc file_read(pointer: ptr, string: *[]byte, length: uint): uint {
    var file: *File = @cast(*File, pointer);
    return @syscall3(0, file.descriptor, string, length);
}

proc file_get_size(file: File): uint {
    var stat: Stat;
    sys_fstat(file.descriptor, &stat);
    return stat.size;
}

proc file_read_to_string(file: File, allocator: Allocator): String {
    var size: uint = file_get_size(file);
    var result: ptr = allocate_size(allocator, size);

    var reader: Reader = file_reader_create(&file);
    var _: uint = read_string(reader, @cast(*[]byte, result), size);

    return @build(String, @cast(*[]byte, result), size);
}
